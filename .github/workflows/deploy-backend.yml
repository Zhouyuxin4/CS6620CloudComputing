name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2  # Áõ¥Êé•ÂÜôÊ≠ªÂå∫Âüü
    
    - name: Deploy to EC2 via SSM
      id: deploy
      run: |
        echo "üöÄ Starting backend deployment..."
        
        # ‰ΩøÁî® EC2_INSTANCE_ID ËÄå‰∏çÊòØ EC2_INSTANCE_ID_BACKEND
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids i-0178c29bf15b3e26c \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy Backend - ${{ github.sha }}" \
          --parameters 'commands=[
            "echo Deployment started at $(date)",
            "cd /home/ubuntu/CS6620CloudComputing/server || exit 1",
            "git pull origin main",
            "npm install --production",
            "pm2 restart yop-backend || pm2 start index.js --name yop-backend",
            "echo Deployment completed at $(date)",
            "pm2 status"
          ]' \
          --output text \
          --query 'Command.CommandId')
        
        echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
        echo "üìã Command ID: $COMMAND_ID"
    
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 25
        
        COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
        INSTANCE_ID="i-0178c29bf15b3e26c"
        
        echo "Checking status for Command: $COMMAND_ID on Instance: $INSTANCE_ID"
        
        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$INSTANCE_ID" \
          --query 'Status' \
          --output text)
        
        echo "üìä Deployment status: $STATUS"
        
        if [ "$STATUS" = "Success" ]; then
          echo "‚úÖ Deployment successful!"
        elif [ "$STATUS" = "InProgress" ]; then
          echo "‚è≥ Still in progress, waiting more..."
          sleep 30
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'Status' \
            --output text)
          echo "üìä Final status: $STATUS"
        fi
        
        if [ "$STATUS" != "Success" ]; then
          echo "‚ùå Deployment failed with status: $STATUS"
          
          echo "=== Output ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardOutputContent' \
            --output text || echo "No output"
          
          echo "=== Errors ==="
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardErrorContent' \
            --output text || echo "No errors"
          
          exit 1
        fi
    
    - name: Get deployment output
      if: always()
      run: |
        COMMAND_ID="${{ steps.deploy.outputs.command_id }}"
        INSTANCE_ID="i-0178c29bf15b3e26c"
        
        echo "=== Full Deployment Output ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "$INSTANCE_ID" \
          --query 'StandardOutputContent' \
          --output text || echo "No output available"
